stat_summary(aes(fill = Dimension), fun = mean, geom = 'bar', position = position_dodge(), alpha = 0.7) +
stat_summary(aes(fill = Dimension), fun.data = function(x) {
data.frame(y = mean(x), ymin = mean(x) - sd(x)/sqrt(length(x)), ymax = mean(x) + sd(x)/sqrt(length(x)))
}, geom = 'errorbar', width = 0.2, position = position_dodge(0.8)) +
theme_minimal() +
labs(y = 'Accuracy (Prop. Correct)', x = 'Age Group (Years)', title = 'Quantification Performance by Age Group and Dimension') +
scale_fill_manual(values = c("lightblue", "salmon")) +
theme(plot.title = element_text(hjust = 0.5),
plot.margin = margin(10, 10, 30, 10)) +
geom_hline(yintercept = 0.5, linetype = 'dashed', color = 'grey46') +
geom_signif(data = test_results,
aes(xmin = xmin, xmax = xmax, annotations = annotation, y_position = y_position, group = group),
manual = TRUE,
tip_length = 0.01,
textsize = 4)
df_summary <- df %>%
group_by(PID, Age, Dimension) %>%
summarise(mean_accuracy = mean(Accuracy)) %>%
ungroup()
ggplot(df_summary, aes(x = Age, y = mean_accuracy, color = Dimension, shape = Dimension)) +
geom_point(size = 3, alpha = 0.8) +
theme_minimal() +
labs(y = 'Performance on Quantification Tasks (Prop. Correct)', x = 'Age (Years)', title = 'Quantification Performance by Participant') +
scale_color_manual(values = c('lightblue', 'salmon')) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_blank()) +
geom_smooth(method = 'lm', aes(color = Dimension), se = FALSE, linetype = 'dashed') + geom_hline(yintercept = 0.5, linetype = 'dashed', color = 'grey46')
summary_df <- df %>%
group_by(PID, AgeGroup, Dimension) %>%
summarise(MeanAccuracy = mean(Accuracy), .groups = "drop")
wide_df <- summary_df %>%
pivot_wider(names_from = Dimension, values_from = MeanAccuracy)
test_results <- wide_df %>%
group_by(AgeGroup) %>%
summarise(
p_value = t.test(Numerical, Temporal, paired = TRUE)$p.value,
.groups = "drop"
) %>%
mutate(
y_position = case_when(
AgeGroup == "2.5-3"   ~ 0.7,
AgeGroup == "3-3.5"   ~ 0.92,
AgeGroup == "3.5-4"   ~ 0.98,
AgeGroup == "4-4.5"   ~ 1.03,
AgeGroup == "4.5-5"   ~ 1.05,
),
xmin = case_when(
AgeGroup == "2.5-3"   ~ 0.8,
AgeGroup == "3-3.5"   ~ 1.8,
AgeGroup == "3.5-4"   ~ 2.8,
AgeGroup == "4-4.5"   ~ 3.8,
AgeGroup == "4.5-5"   ~ 4.8,
), xmax = case_when(
AgeGroup == "2.5-3"   ~ 1.2,
AgeGroup == "3-3.5"   ~ 2.2,
AgeGroup == "3.5-4"   ~ 3.2,
AgeGroup == "4-4.5"   ~ 4.2,
AgeGroup == "4.5-5"   ~ 5.2,
),
annotation = case_when(
p_value < 0.001 ~ "***",
p_value < 0.01 ~ "**",
p_value < 0.05 ~ "*",
TRUE ~ "ns"
)
)
test_results$group = 1:nrow(test_results)
ggplot(df, aes(x = AgeGroup, y = Accuracy)) +
stat_summary(aes(fill = Dimension), fun = mean, geom = 'bar', position = position_dodge(), alpha = 0.7) +
stat_summary(aes(fill = Dimension), fun.data = function(x) {
data.frame(y = mean(x), ymin = mean(x) - sd(x)/sqrt(length(x)), ymax = mean(x) + sd(x)/sqrt(length(x)))
}, geom = 'errorbar', width = 0.2, position = position_dodge(0.8)) +
theme_minimal() +
labs(y = 'Accuracy (Prop. Correct)', x = 'Age Group (Years)', title = 'Quantification Performance by Age Group and Dimension') +
scale_fill_manual(values = c("lightblue", "salmon")) +
theme(plot.title = element_text(hjust = 0.5),
plot.margin = margin(10, 10, 30, 10)) +
geom_hline(yintercept = 0.5, linetype = 'dashed', color = 'grey46') +
geom_signif(data = test_results,
aes(xmin = xmin, xmax = xmax, annotations = annotation, y_position = y_position, group = group),
manual = TRUE,
tip_length = 0.01,
textsize = 4)
opts_chunk$set(fig.width=8, fig.height=5,
echo=TRUE,
warning=FALSE, message=FALSE,
cache=TRUE)
knitr::opts_chunk$set(fig.width=8, fig.height=5,
echo=FALSE,
warning=FALSE, message=FALSE,
cache=TRUE)
library('devtools')
library('tidyverse')
library("purrr")
library('ggplot2')
library('lme4')
library('car')
library('emmeans')
library('prmisc')
library('report')
library('readxl')
library('dplyr')
devtools::install_github("crsh/papaja")
knitr::opts_chunk$set(fig.width=8, fig.height=5,
echo=FALSE,
warning=FALSE, message=FALSE,
cache=TRUE)
library('performance')
library('devtools')
library('tidyverse')
library("purrr")
library('ggplot2')
library('lme4')
library('car')
library('emmeans')
library('prmisc')
library('report')
library('readxl')
library('dplyr')
library('papaja')
library('AICcmodavg')
df <- read.csv("~/AgeConcepts/Age-Concepts/Age-Concepts-Data.csv")
df_clean <- df %>%
filter(Task == 'AJT')
length(unique(df_clean$PID))
all(table(df_clean$PID) == 18)
df_clean$Condition <- trimws(df_clean$Condition)
View(df_clean)
df_clean$AJT_Accuracy <- as.numeric(df_clean$AJT_Accuracy)
df_clean$Age_scaled <- scale(df_clean$Age)
View(df_clean)
df <- df %>%
mutate(AgeGroup = case_when(
Age >= 3 & Age < 4   ~ '3',
Age >= 4 & Age < 5   ~ '4',
Age >= 5 & Age < 6   ~ '5'
))
df <- read.csv("~/AgeConcepts/Age-Concepts/Age-Concepts-Data.csv")
df <- df %>%
mutate(AgeGroup = case_when(
Age >= 3 & Age < 4   ~ '3',
Age >= 4 & Age < 5   ~ '4',
Age >= 5 & Age < 6   ~ '5'
))
df_clean <- df %>%
filter(Task == 'AJT')
length(unique(df_clean$PID))
all(table(df_clean$PID) == 18)
df_clean$Condition <- trimws(df_clean$Condition)
length(unique(df_clean$PID))
all(table(df_clean$PID) == 18)
df_clean$Condition <- trimws(df_clean$Condition)
df_clean %>%
group_by(AgeGroup, Condition) %>%
summarise(n_unique_PID = n_distinct(PID), .groups = "drop")
knitr::opts_chunk$set(fig.width=8, fig.height=5,
echo=FALSE,
warning=FALSE, message=FALSE,
cache=TRUE)
library('performance')
library('devtools')
library('tidyverse')
library("purrr")
library('ggplot2')
library('lme4')
library('car')
library('emmeans')
library('prmisc')
library('report')
library('readxl')
library('dplyr')
library('papaja')
library('AICcmodavg')
df <- read.csv("~/AgeConcepts/Age-Concepts/Age-Concepts-Data.csv")
df <- df %>%
mutate(AgeGroup = case_when(
Age >= 3 & Age < 4   ~ '3',
Age >= 4 & Age < 5   ~ '4',
Age >= 5 & Age < 6   ~ '5'
))
df_clean <- df %>%
filter(Task == 'AJT')
length(unique(df_clean$PID))
all(table(df_clean$PID) == 18)
df_clean$Condition <- trimws(df_clean$Condition)
df_clean %>%
group_by(AgeGroup, Condition) %>%
summarise(n_unique_PID = n_distinct(PID), .groups = "drop")
all(table(df_clean$PID) == 18)
length(unique(df_clean$PID))
df <- read.csv("C:\\Users\\Owner\\OneDrive\\Documents\\TemporalQuantification\\Temporal-Quantification\\Temporal-Quantification-Exp1-Data.csv")
View(df)
length(unique(df$PID[df$Version == 1]))
length(unique(df$PID[df$Version == 2]))
df_clean %>%
group_by(AgeGroup, Condition) %>%
summarise(n_unique_PID = n_distinct(PID), .groups = "drop")
knitr::opts_chunk$set(fig.width=8, fig.height=5,
echo=FALSE,
warning=FALSE, message=FALSE,
cache=TRUE)
library('performance')
library('devtools')
library('tidyverse')
library("purrr")
library('ggplot2')
library('lme4')
library('car')
library('emmeans')
library('prmisc')
library('report')
library('readxl')
library('dplyr')
library('papaja')
library('AICcmodavg')
df <- read.csv("~/AgeConcepts/Age-Concepts/Age-Concepts-Data.csv")
df <- df %>%
mutate(AgeGroup = case_when(
Age >= 3 & Age < 4   ~ '3',
Age >= 4 & Age < 5   ~ '4',
Age >= 5 & Age < 6   ~ '5'
))
df_clean <- df %>%
filter(Task == 'AJT')
length(unique(df_clean$PID))
all(table(df_clean$PID) == 18)
df_clean$Condition <- trimws(df_clean$Condition)
df_clean %>%
group_by(AgeGroup, Condition, Version) %>%
summarise(
n_unique_PID = n_distinct(PID),
mean_age = mean(Age, na.rm = TRUE),
.groups = "drop"
)
# df_clean %>%
# group_by(Condition) %>%
# summarise(mean_age = mean(Age, na.rm = TRUE))
library(readxl)
library(ggplot2)
library(dplyr)
library(lme4)
df <- read_csv("C:\\Users\\Owner\\OneDrive\\Documents\\TemporalQuantification\\TempQuantExp2PowerAnalysisData.csv")
View(df)
df %>%
group_by(PID, Dimension)
df %>%
group_by(PID, Dimension) %>%
summarise(
n_unique_PID = n_distinct(PID)
)
model <- glmer(Accuracy ~ Age + Dimension + (1|PID) + (1|Item), data = df, family = 'binomial')
model
Anova(model)
fixef(model)
effect_size <- .5 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
fixef(model)["DimensionTemporal"] <- effect_size
fixef(model)
effect_size <- .5 * pi / sqrt(3)
probability <- plogis(effect_size)
probability
effect_size <- .5 * pi / sqrt(3)
probability <- plogis(effect_size)
current_fixefs <- fixef(model)
current_fixefs["DimensionTemporal"] <- effect_size
fixef(model) <- current_fixefs
library(readxl)
library(ggplot2)
library(dplyr)
library(lme4)
effect_size <- .5 * pi / sqrt(3)
probability <- plogis(effect_size)
current_fixefs <- fixef(model)
current_fixefs["DimensionTemporal"] <- effect_size
fixef(model) <- current_fixefs
library(simr)
effect_size <- .5 * pi / sqrt(3)
probability <- plogis(effect_size)
current_fixefs <- fixef(model)
current_fixefs["DimensionTemporal"] <- effect_size
fixef(model) <- current_fixefs
model_extended <- extend(model, along = "PID", n = 90)
powerSim(model_extended, nsim = 10)
effect_size <- .5 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 90)
powerSim(model_extended, nsim = 10)
effect_size <- .5 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 120)
powerSim(model_extended, nsim = 10)
effect_size <- .5 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 100)
powerSim(model_extended, nsim = 10)
effect_size <- .5 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 100)
powerSim(model_extended, nsim = 100)
effect_size <- .45 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 110)
powerSim(model_extended, nsim = 100)
effect_size <- .45 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 104)
powerSim(model_extended, nsim = 100)
effect_size <- .3 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 120)
powerSim(model_extended, nsim = 100)
effect_size <- .15 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 120)
powerSim(model_extended, nsim = 100)
effect_size <- .15 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 110)
powerSim(model_extended, nsim = 100)
effect_size <- .15 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 100)
powerSim(model_extended, nsim = 100)
pilotdata <- read_excel("C:\\Users\\Owner\\Downloads\\Temporal Quantification Pilot Data.xlsx")
base_model <- lmer(Accuracy ~ Age + (1|PID) + (1|Item), data = pilotdata)
base_model
anova(base_model, ddf = "Satterthwaite")
mean(pilotdata$Age)
pilot_data_bytask_withSEM <- pilotdata %>%
group_by(Task) %>%
summarise(MeanAccuracy = mean(Accuracy),
SD = sd(Accuracy),
n = n(),
SEM = SD / sqrt(n))
augmented_model <- lmer(Accuracy ~ Age + Task + (1 + Task|PID) + (1|Item), data = pilotdata)
summary(augmented_model)
pilotdata$PID <- as.factor(pilotdata$PID)
fixef(augmented_model)
effect_size <- 0.15 * pi / sqrt(3)  # Approximate conversion to log odds
probability <- plogis(effect_size)
fixef(augmented_model)["TaskTemporal"] <- effect_size
model_extended <- extend(augmented_model, along = "PID", n = 60)
powerSim(model_extended, nsim = 100)
effect_size <- .15 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 100)
powerSim(model_extended, nsim = 100)
effect_size <- .15 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 100)
powerSim(model_extended, nsim = 100, test = fixed("DimensionTemporal"))
effect_size <- .5 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 100)
powerSim(model_extended, nsim = 100, test = fixed("DimensionTemporal"))
effect_size <- 0.15 * pi / sqrt(3)  # Approximate conversion to log odds
probability <- plogis(effect_size)
fixef(augmented_model)["TaskTemporal"] <- effect_size
model_extended <- extend(augmented_model, along = "PID", n = 60)
powerSim(model_extended, nsim = 100, test = fixed("TaskTemporal"))
augmented_model <- lmer(Accuracy ~ Age + Task + (1 + Task|PID) + (1|Item), data = pilotdata)
summary(augmented_model)
effect_size <- 0.15 * pi / sqrt(3)  # Approximate conversion to log odds
probability <- plogis(effect_size)
fixef(augmented_model)["TaskTemporal"] <- effect_size
model_extended <- extend(augmented_model, along = "PID", n = 60)
powerSim(model_extended, nsim = 100, test = fixed("TaskTemporal"))
effect_size <- 0.15 * pi / sqrt(3)  # Approximate conversion to log odds
probability <- plogis(effect_size)
fixef(augmented_model)["TaskTemporal"] <- effect_size
model_extended <- extend(augmented_model, along = "PID", n = 60)
powerSim(model_extended, nsim = 100)
library(tidyverse)
library(simr)
library(faux)
library(plyr)
library(broom)
library(car)
library(here)
library(lme4)
library(readxl)
data <- read_excel("C:\\Users\\Owner\\Downloads\\Emotion Self vs. Other Pilot 2 Data Sheet.xlsx")
labels <- data %>%
filter(
Phase == 'Self vs. Other',
Measure == 'Labels'
)
labels$Trial <- paste(labels$`Who found it?`, labels$Subject)
labels$Accuracy <- as.numeric(labels$Accuracy)
labels_model <- glmer(Accuracy ~ Age + Subject + (1 + Subject |PID) + (1|Trial), data = labels, family = 'binomial')
summary(labels_model)
labels$PID <- as.factor(labels$PID)
str(labels$PID)
effect_size <- 0.45 * pi / sqrt(3)  # Approximate conversion to log odds
probability <- plogis(effect_size) #Estimated probability that SubjectSelf has an effect with this selected effect size
fixef(labels_model)["SubjectSelf"] <- effect_size  # Apply effect to 'Subject' predictor
labels_extended <- extend(labels_model, along = "PID", n = 88)
powerSim(labels_extended, test = fcompare(Accuracy ~ Age), nsim = 100) #did a comparison to the previous model because Age is likely not gonna vary given the narrow sample size
effect_size <- .45 * pi / sqrt(3)
probability <- plogis(effect_size)
fixef(model)["DimensionTemporal"] <- effect_size
model_extended <- extend(model, along = "PID", n = 100)
powerSim(model_extended, nsim = 100, test = fixed("DimensionTemporal"))
effect_size <- 0.45 * pi / sqrt(3)
# Get the current fixed effects and change one
current_fixefs <- fixef(model)
current_fixefs["DimensionTemporal"] <- effect_size
# Refit model with updated fixed effects
model <- update(model, start = list(fixef = current_fixefs))
# Extend and simulate power
library(simr)
model_extended <- extend(model, along = "PID", n = 100)
powerSim(model_extended, nsim = 100, test = fixed("DimensionTemporal"))
effect_size <- 0.5 * pi / sqrt(3)
# Get the current fixed effects and change one
current_fixefs <- fixef(model)
current_fixefs["DimensionTemporal"] <- effect_size
# Refit model with updated fixed effects
model <- update(model, start = list(fixef = current_fixefs))
# Extend and simulate power
library(simr)
model_extended <- extend(model, along = "PID", n = 120)
powerSim(model_extended, nsim = 100, test = fixed("DimensionTemporal"))
effect_size <- 0.6 * pi / sqrt(3)
# Get the current fixed effects and change one
current_fixefs <- fixef(model)
current_fixefs["DimensionTemporal"] <- effect_size
# Refit model with updated fixed effects
model <- update(model, start = list(fixef = current_fixefs))
# Extend and simulate power
library(simr)
model_extended <- extend(model, along = "PID", n = 150)
powerSim(model_extended, nsim = 100, test = fixed("DimensionTemporal"))
effect_size <- 0.5 * pi / sqrt(3)
# Get the current fixed effects and change one
current_fixefs <- fixef(model)
current_fixefs["DimensionTemporal"] <- effect_size
# Refit model with updated fixed effects
model <- update(model, start = list(fixef = current_fixefs))
# Extend and simulate power
library(simr)
model_extended <- extend(model, along = "PID", n = 200)
powerSim(model_extended, nsim = 100, test = fixed("DimensionTemporal"))
base_model <- glmer(Accuracy ~ Age + (1|PID) + (1|Item), data = df, family = 'binomial')
model <- glmer(Accuracy ~ Age + Dimension + (1|PID) + (1|Item), data = df, family = 'binomial')
Anova(model)
fixef(model)
base_model <- glmer(Accuracy ~ Age + (1|PID) + (1|Item), data = df, family = 'binomial')
model <- glmer(Accuracy ~ Age + Dimension + (1|PID) + (1|Item), data = df, family = 'binomial')
anova(base_model, model)
effect_size <- 0.5 * pi / sqrt(3)
# Get the current fixed effects and change one
current_fixefs <- fixef(model)
current_fixefs["DimensionTemporal"] <- effect_size
# Refit model with updated fixed effects
model <- update(model, start = list(fixef = current_fixefs))
# Extend and simulate power
library(simr)
model_extended <- extend(model, along = "PID", n = 120)
powerSim(model_extended, nsim = 100, test = fcompare(base_model))
labels_model <- glmer(Accuracy ~ Age + Subject + (1 + Subject |PID) + (1|Trial), data = labels, family = 'binomial')
summary(labels_model)
compare_model <- glmer(Accuracy ~ Age + (1 + Subject |PID) + (1|Trial), data = labels, family = 'binomial')
effect_size <- 0.45 * pi / sqrt(3)
current_fixefs <- fixef(labels_model)
current_fixefs["SubjectSelf"] <- effect_size
labels_model <- update(labels_model, start = list(fixef = current_fixefs))
# Extend for power simulation
labels_extended <- extend(labels_model, along = "PID", n = 88)
# Run power simulation on the effect you're interested in
powerSim(labels_extended, test = fcompare(Accuracy ~ Age + (1 + Subject |PID) + (1|Trial)), nsim = 100)
model <- glmer(Accuracy ~ Age + Dimension + (1|PID) + (1|Item), data = df, family = 'binomial')
effect_size <- 0.45 * pi / sqrt(3)
# Get the current fixed effects and change one
current_fixefs <- fixef(model)
current_fixefs["DimensionTemporal"] <- effect_size
# Refit model with updated fixed effects
model <- update(model, start = list(fixef = current_fixefs))
# Extend and simulate power
library(simr)
model_extended <- extend(model, along = "PID", n = 100)
powerSim(model_extended, nsim = 100, test = fixed("DimensionTemporal"))
df <- read.csv("C:\\Users\\Owner\\OneDrive\\Documents\\TemporalQuantification\\Temporal-Quantification\\Temporal-Quantification-Exp1-Data.csv")
# base model with only child age as fixed effect
base_model <- glmer(Accuracy ~ Age + (1|PID) + (1|Item), data = df, family = 'binomial')
# model which adds dimension as a term
dimension_model <- glmer(Accuracy ~ Age + Dimension + (1 + Dimension | PID) + (1|Item), data = df, family = 'binomial')
summary(dimension_model)
effect_size <- 0.8 * pi / sqrt(3)
# Get the current fixed effects and change one
current_fixefs <- fixef(model)
current_fixefs["DimensionTemporal"] <- effect_size
# Refit model with updated fixed effects
model <- update(model, start = list(fixef = current_fixefs))
# Extend and simulate power
library(simr)
model_extended <- extend(model, along = "PID", n = 120)
powerSim(model_extended, nsim = 100, test = fixed("DimensionTemporal"))
